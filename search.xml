<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git</title>
    <url>/2020/04/06/git/</url>
    <content><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><p>git是一种分布式版本控制方法。git可以高效的控制管理代码，完善恢复，帮助完成团队合作的任务。它记录的是修改记录，而不是文件。这也使的它可以在本地进行高效的版本控制，文章简单介绍git的使用方法，非常基础简单，仅供参考。</p>
<a id="more"></a>

<h2 id="创建自己的git仓库"><a href="#创建自己的git仓库" class="headerlink" title="创建自己的git仓库"></a>创建自己的git仓库</h2><p>首先要在自己的电脑上安装好git库，参考网上教程吧。可以在<a href="https://git-scm.com/" target="_blank" rel="noopener">官方网站</a>下载，安装。<br>安装好后，电脑上建立一个文件夹，从终端进入文件夹，输入代码<code>git init</code>就创建了一个git仓库。这个文件夹就被初始化成一个git仓库了。之后在这个文件夹进行的文件操作会被git所记录。</p>
<h2 id="把东西搬到仓库里"><a href="#把东西搬到仓库里" class="headerlink" title="把东西搬到仓库里"></a>把东西搬到仓库里</h2><p>简单的说，git管理中有三个区域，分别是工作区，暂存区，储存区。这三个区并不是指切实的在硬盘上划分出来的区域，而是指某一文件的状态。工作区是对当前文件进行修改的状态，暂存区是将工作区文件的修改记录记下来，储存区就是将暂存区的许多文件打包成一个版本存下记录。</p>
<p>用<code>git add filename</code>把文件放入暂存区，可以使用<code>git status</code>查看当前工作区和暂存区的文件内容。使用<code>git commit -m&quot;介绍&quot;</code>创建版本快照，完整的放入存储室。这样就完成了一次提交，使用<code>git log</code>就可以查看到提交情况。</p>
<h2 id="查看自己的仓库"><a href="#查看自己的仓库" class="headerlink" title="查看自己的仓库"></a>查看自己的仓库</h2><p><code>git log</code>可以查看自己的仓库库存，可以加入<code>--pretty==oneline</code> 使显示变的亲和一些。</p>
<h2 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h2><p>可以使用<code>git tag&lt;name&gt;</code>对生成的版本进行打标签工作。可以用<code>git tag -d &lt;name&gt;</code>删除标签。</p>
<p>引出分支：<code>git branch branchname</code>这样会创建一个branchname的分支。<br>查看分支：<code>git branch</code>这样可以直接查看分支。<br>切换分支：<code>git switc branchname</code><br>合并分支：<code>git merge branchname</code><br>删除分支：<code>git branch -d branchname</code></p>
<p>当有一个版本后，git鼓励在分支上工作，等调试完了在并入主支，分支功能也是高效合作的关键功能。<br>版本回退：<code>git reset --hard HEAD^</code>表示回退到上一个版本，回退几个版本就加几个^。<br>指令记录查看：<code>git reflog</code>可以查看进行过的指令，这里可以找到被调整过的版本号。</p>
<p>查看变化：<code>git diff HEAD -- file</code>可以查看file工作区与版本库之间的差别。</p>
<p>撤销修改：<code>git checkout --file</code>可以撤销做的文件修改。</p>
<h2 id="常用代码"><a href="#常用代码" class="headerlink" title="常用代码"></a>常用代码</h2><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><p>配置git用户名：<code>git config --global user.name &quot;name&quot;</code><br>配置git邮箱：<code>git config --global user.email &quot;email&quot;</code><br>查看git用户名：<code>git config --global user.name</code><br>查看git邮箱：<code>git config --global user.email</code></p>
<p>查看全局配置：<code>git config --global --list</code><br>查看本地配置：<code>git config --local --list</code><br>查看全部配置：<code>git config --list</code><br>设置git彩色ui特性：<code>git config --global color.ui true</code>（但是我没有成功过hhh，展示不知道怎么回事）</p>
<h3 id="管理代码类"><a href="#管理代码类" class="headerlink" title="管理代码类"></a>管理代码类</h3><p>工作区的文件加到暂存区：<code>git add filename</code><br>添加所有被tracked的文件的修改到暂存区：<code>git add -u</code><br>添加所有tracked文件修改和没修改文件和untracked文件：<code>git add -A</code><br>将当前工作区的所有文件都加入暂存区：<code>git add .</code><br>进入交互界面模式，按需添加文件到缓存区：<code>git add -i</code></p>
<p>暂存区提交到本地仓库：<code>git commit -m</code><br>直接提交到仓库：<code>git commit -a -m</code></p>
<p>查看git管理状态：<code>git status</code><br>修改文件名字：<code>git rm filename</code></p>
<h3 id="调用版本、分支管理"><a href="#调用版本、分支管理" class="headerlink" title="调用版本、分支管理"></a>调用版本、分支管理</h3><p><code>git diff</code><br><code>git diff branchname</code><br><code>git diff HEAD</code><br><code>git diff id path</code><br><code>git diff --stage</code><br><code>git diff TAG</code><br><code>git diff branchA branchB</code><br>跳转到此分支：<code>git checkout -b dev</code><br>新建分支并跳转到此分支：<code>git branch dev</code><br>查看分支：<code>git checkout dev</code><br>查看分支：<code>git branch</code><br>合并分支：<code>git merge dev</code><br>回退版本：<code>git reset HEAD^</code><br>查看历史命令：<code>git reflog</code><br>回退到指定版本：<code>git reset --hard 版本号</code></p>
<h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><p><code>git tag &lt;name&gt;</code><br><code>git tag</code><br><code>git show &lt;tagname&gt;</code><br><code>git tag -a v0.1 -m</code><br><code>git tag -l &lt;版本号&gt;</code></p>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><code>git log</code><br><code>git log -p -times</code><br><code>git log --stat</code><br><code>git log --name-only</code><br><code>git log -oneline</code><br><code>git log --graph --all --oneline</code><br><code>git log filename</code></p>
<h3 id="远端git交互"><a href="#远端git交互" class="headerlink" title="远端git交互"></a>远端git交互</h3><p>把本地仓库代码推送到远端：<code>git push -u origin master</code><br>将远端代码下载到本地仓库：<code>git clone</code></p>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>GitHub是最大的代码托管中心。可以将自己的代码托管在这个网站上（简单说相当于是给自己的代码提供了一个云盘存放，当然GitHub本身其实是有很多很方便的特性）。<br>.io库，是github提供的一个服务器，相当于一个静态网页代码的托管，可以用它完成个人主页的创建，之后会有专门的文章记录我的个人主页创建过程。</p>
<p>文章之后还会慢慢修改补充，当前只整理了这些。<br>感谢大佬的教程相助！</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
